package accountapi_test

import (
	"testing"

	. "github.com/alexdreptu/form3-accountapi-client"
	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

type testOptions struct {
	name                           string
	shouldError                    bool
	accType                        string
	accID                          string
	accOrganisationID              string
	accCountry                     string
	accBIC                         string
	accBankID                      string
	accBankIDCode                  string
	accAccountNumber               string
	accBaseCurrency                string
	accJointAccount                bool
	accFirstName                   string
	accAlternativeBankAccountNames []string
	accAccountMatchingOptOut       bool
	accCustomerID                  string
}

func TestNewAccount(t *testing.T) {
	allCountriesTestCases := []testOptions{
		// Type tests
		{
			name:                           "invalid type blank",
			shouldError:                    true,
			accType:                        "",
			accID:                          uuid.New().String(),
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomFirstName(),
			accAlternativeBankAccountNames: randomAlternativeBankAccountNames(),
			accCustomerID:                  randomCustomerID(),
		},
		{
			name:                           "invalid type",
			shouldError:                    true,
			accType:                        randomAlpha(len(accountType)),
			accID:                          uuid.New().String(),
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomFirstName(),
			accAlternativeBankAccountNames: randomAlternativeBankAccountNames(),
			accCustomerID:                  randomCustomerID(),
		},
		// ID tests
		{
			name:                           "invalid id blank",
			shouldError:                    true,
			accType:                        accountType,
			accID:                          "",
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomFirstName(),
			accAlternativeBankAccountNames: randomAlternativeBankAccountNames(),
			accCustomerID:                  randomCustomerID(),
		},
		{
			name:                           "invalid id",
			shouldError:                    true,
			accType:                        accountType,
			accID:                          randomAlphanumeric(36, alphanumericStyleNormal),
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomFirstName(),
			accAlternativeBankAccountNames: randomAlternativeBankAccountNames(),
			accCustomerID:                  randomCustomerID(),
		},
		// OrganisationID tests
		{
			name:                           "invalid organisation id blank",
			shouldError:                    true,
			accType:                        accountType,
			accID:                          uuid.New().String(),
			accOrganisationID:              "",
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomFirstName(),
			accAlternativeBankAccountNames: randomAlternativeBankAccountNames(),
			accCustomerID:                  randomCustomerID(),
		},
		{
			name:                           "invalid organisation id",
			shouldError:                    true,
			accType:                        accountType,
			accID:                          uuid.New().String(),
			accOrganisationID:              randomAlphanumeric(36, alphanumericStyleNormal),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomFirstName(),
			accAlternativeBankAccountNames: randomAlternativeBankAccountNames(),
			accCustomerID:                  randomCustomerID(),
		},
		// Firstname tests
		{
			name:                           "firstname blank",
			shouldError:                    false,
			accType:                        accountType,
			accID:                          uuid.New().String(),
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   "",
			accAlternativeBankAccountNames: randomAlternativeBankAccountNames(),
			accCustomerID:                  randomCustomerID(),
		},
		{
			name:                           "invalid firstname length 1",
			shouldError:                    true,
			accType:                        accountType,
			accID:                          uuid.New().String(),
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomAlpha(1),
			accAlternativeBankAccountNames: randomAlternativeBankAccountNames(),
			accCustomerID:                  randomCustomerID(),
		},
		{
			name:                           "invalid firstname length 141",
			shouldError:                    true,
			accType:                        accountType,
			accID:                          uuid.New().String(),
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomAlpha(141),
			accAlternativeBankAccountNames: randomAlternativeBankAccountNames(),
			accCustomerID:                  randomCustomerID(),
		},
		{
			name:                           "invalid firstname non english letters",
			shouldError:                    true,
			accType:                        accountType,
			accID:                          uuid.New().String(),
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomAlphanumeric(5, alphanumericStylePure),
			accAlternativeBankAccountNames: randomAlternativeBankAccountNames(),
			accCustomerID:                  randomCustomerID(),
		},
		// AlternativeBankAccountNames tests
		{
			name:                           "alternative bank account names blank",
			shouldError:                    false,
			accType:                        accountType,
			accID:                          uuid.New().String(),
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomFirstName(),
			accAlternativeBankAccountNames: []string{},
			accCustomerID:                  randomCustomerID(),
		},
		{
			name:                           "invalid alternative bank account names array length 4",
			shouldError:                    true,
			accType:                        accountType,
			accID:                          uuid.New().String(),
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomFirstName(),
			accAlternativeBankAccountNames: randomAlternativeBankAccountNames(4),
			accCustomerID:                  randomCustomerID(),
		},
		{
			name:                           "invalid alternative bank account names element length 2",
			shouldError:                    true,
			accType:                        accountType,
			accID:                          uuid.New().String(),
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomFirstName(),
			accAlternativeBankAccountNames: []string{randomAlpha(2)},
			accCustomerID:                  randomCustomerID(),
		},
		{
			name:                           "invalid alternative bank account names element length 141",
			shouldError:                    true,
			accType:                        accountType,
			accID:                          uuid.New().String(),
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomFirstName(),
			accAlternativeBankAccountNames: []string{randomAlpha(141)},
			accCustomerID:                  randomCustomerID(),
		},
		// CustomerID tests
		{
			name:                           "customer id blank",
			shouldError:                    false,
			accType:                        accountType,
			accID:                          uuid.New().String(),
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomFirstName(),
			accAlternativeBankAccountNames: randomAlternativeBankAccountNames(),
			accCustomerID:                  "",
		},
		{
			name:                           "invalid customer id length 4",
			shouldError:                    true,
			accType:                        accountType,
			accID:                          uuid.New().String(),
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomFirstName(),
			accAlternativeBankAccountNames: randomAlternativeBankAccountNames(),
			accCustomerID: randomAlphanumeric(
				4,
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:                           "invalid customer id length 16",
			shouldError:                    true,
			accType:                        accountType,
			accID:                          uuid.New().String(),
			accOrganisationID:              uuid.New().String(),
			accCountry:                     CountryUnitedKingdom,
			accBIC:                         randomBIC(),
			accBankID:                      randomBankIDUnitedKingdom(),
			accBankIDCode:                  BankIDCodeUnitedKingdom,
			accAccountNumber:               randomAccountNumberUnitedKingdom(),
			accBaseCurrency:                CurrencyUnitedKingdom,
			accFirstName:                   randomFirstName(),
			accAlternativeBankAccountNames: randomAlternativeBankAccountNames(),
			accCustomerID: randomAlphanumeric(
				16,
				alphanumericStylePure,
				uppercase,
			),
		},
	}

	unitedKingdomTestCases := []testOptions{
		// BIC tests
		{
			name:              "invalid bic blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            "",
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  randomAccountNumberUnitedKingdom(),
			accBaseCurrency:   CurrencyUnitedKingdom,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  randomAccountNumberUnitedKingdom(),
			accBaseCurrency:   CurrencyUnitedKingdom,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  randomAccountNumberUnitedKingdom(),
			accBaseCurrency:   CurrencyUnitedKingdom,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  randomAccountNumberUnitedKingdom(),
			accBaseCurrency:   CurrencyUnitedKingdom,
		},
		// Bank ID tests
		{
			name:              "invalid bank id blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  randomAccountNumberUnitedKingdom(),
			accBaseCurrency:   CurrencyUnitedKingdom,
		},
		{
			name:              "invalid bank id not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID: randomAlphanumeric(
				BankIDLengthUnitedKingdom,
				alphanumericStylePure,
			),
			accBankIDCode:    BankIDCodeUnitedKingdom,
			accAccountNumber: randomAccountNumberUnitedKingdom(),
			accBaseCurrency:  CurrencyUnitedKingdom,
		},
		{
			name:              "invalid bank id length 5",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(5),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  randomAccountNumberUnitedKingdom(),
			accBaseCurrency:   CurrencyUnitedKingdom,
		},
		{
			name:              "invalid bank id length 7",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(7),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  randomAccountNumberUnitedKingdom(),
			accBaseCurrency:   CurrencyUnitedKingdom,
		},
		// Bank ID Code tests
		{
			name:              "invalid bank id code blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberUnitedKingdom(),
			accBaseCurrency:   CurrencyUnitedKingdom,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberUnitedKingdom(),
			accBaseCurrency:   CurrencyUnitedKingdom,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodeUnitedKingdom),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberUnitedKingdom(),
			accBaseCurrency:  CurrencyUnitedKingdom,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyUnitedKingdom,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber: randomAlphanumeric(
				AccountNumberLengthUnitedKingdom,
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencyUnitedKingdom,
		},
		{
			name:              "invalid account number length 7",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  randomNumberString(7),
			accBaseCurrency:   CurrencyUnitedKingdom,
		},
		{
			name:              "invalid account number length 9",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  randomNumberString(9),
			accBaseCurrency:   CurrencyUnitedKingdom,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  randomAccountNumberUnitedKingdom(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  randomAccountNumberUnitedKingdom(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  randomAccountNumberUnitedKingdom(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencyUnitedKingdom),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  randomAccountNumberUnitedKingdom(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedKingdom,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedKingdom(),
			accBankIDCode:     BankIDCodeUnitedKingdom,
			accAccountNumber:  randomAccountNumberUnitedKingdom(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	australiaTestCases := []testOptions{
		// BIC tests
		{
			name:              "invalid bic blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            "",
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  randomAccountNumberAustralia(),
			accBaseCurrency:   CurrencyAustralia,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  randomAccountNumberAustralia(),
			accBaseCurrency:   CurrencyAustralia,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  randomAccountNumberAustralia(),
			accBaseCurrency:   CurrencyAustralia,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  randomAccountNumberAustralia(),
			accBaseCurrency:   CurrencyAustralia,
		},
		// Bank ID tests
		{
			name:              "bank id blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  randomAccountNumberAustralia(),
			accBaseCurrency:   CurrencyAustralia,
		},
		{
			name:              "invalid bank id not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID: randomAlphanumeric(
				BankIDLengthAustralia,
				alphanumericStylePure,
			),
			accBankIDCode:    BankIDCodeAustralia,
			accAccountNumber: randomAccountNumberAustralia(),
			accBaseCurrency:  CurrencyAustralia,
		},
		{
			name:              "invalid bank id length 5",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(5),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  randomAccountNumberAustralia(),
			accBaseCurrency:   CurrencyAustralia,
		},
		{
			name:              "invalid bank id length 7",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(7),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  randomAccountNumberAustralia(),
			accBaseCurrency:   CurrencyAustralia,
		},
		// Bank ID Code tests
		{
			name:              "invalid bank id code blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberAustralia(),
			accBaseCurrency:   CurrencyAustralia,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberAustralia(),
			accBaseCurrency:   CurrencyAustralia,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDAustralia(),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodeAustralia),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberAustralia(),
			accBaseCurrency:  CurrencyAustralia,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyAustralia,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber: randomAlphanumeric(
				randomLength(
					AccountNumberLengthAustraliaStart,
					AccountNumberLengthAustraliaStop,
				),
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencyAustralia,
		},
		{
			name:              "invalid account number length 5",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  randomNumberString(5),
			accBaseCurrency:   CurrencyAustralia,
		},
		{
			name:              "invalid account number length 11",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  randomNumberString(11),
			accBaseCurrency:   CurrencyAustralia,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  randomAccountNumberAustralia(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  randomAccountNumberAustralia(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  randomAccountNumberAustralia(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencyAustralia),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  randomAccountNumberAustralia(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryAustralia,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDAustralia(),
			accBankIDCode:     BankIDCodeAustralia,
			accAccountNumber:  randomAccountNumberAustralia(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	belgiumTestCases := []testOptions{
		// BIC tests
		{
			name:              "bic blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            "",
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  randomAccountNumberBelgium(),
			accBaseCurrency:   CurrencyBelgium,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  randomAccountNumberBelgium(),
			accBaseCurrency:   CurrencyBelgium,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  randomAccountNumberBelgium(),
			accBaseCurrency:   CurrencyBelgium,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  randomAccountNumberBelgium(),
			accBaseCurrency:   CurrencyBelgium,
		},
		// Bank ID tests
		{
			name:              "invalid bank id blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  randomAccountNumberBelgium(),
			accBaseCurrency:   CurrencyBelgium,
		},
		{
			name:              "invalid bank id not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID: randomAlphanumeric(
				BankIDLengthBelgium,
				alphanumericStylePure,
			),
			accBankIDCode:    BankIDCodeBelgium,
			accAccountNumber: randomAccountNumberBelgium(),
			accBaseCurrency:  CurrencyBelgium,
		},
		{
			name:              "invalid bank id length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(2),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  randomAccountNumberBelgium(),
			accBaseCurrency:   CurrencyBelgium,
		},
		{
			name:              "invalid bank id length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(4),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  randomAccountNumberBelgium(),
			accBaseCurrency:   CurrencyBelgium,
		},
		// Bank ID Code tests
		{
			name:              "invalid bank id code blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberBelgium(),
			accBaseCurrency:   CurrencyBelgium,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberBelgium(),
			accBaseCurrency:   CurrencyBelgium,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDBelgium(),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodeBelgium),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberBelgium(),
			accBaseCurrency:  CurrencyBelgium,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyBelgium,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber: randomAlphanumeric(
				AccountNumberLengthBelgium,
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencyBelgium,
		},
		{
			name:              "invalid account number length 6",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  randomNumberString(6),
			accBaseCurrency:   CurrencyBelgium,
		},
		{
			name:              "invalid account number length 8",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  randomNumberString(8),
			accBaseCurrency:   CurrencyBelgium,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  randomAccountNumberBelgium(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  randomAccountNumberBelgium(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  randomAccountNumberBelgium(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencyBelgium),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  randomAccountNumberBelgium(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryBelgium,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDBelgium(),
			accBankIDCode:     BankIDCodeBelgium,
			accAccountNumber:  randomAccountNumberBelgium(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	canadaTestCases := []testOptions{
		// BIC tests
		{
			name:              "invalid bic blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            "",
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  randomAccountNumberCanada(),
			accBaseCurrency:   CurrencyCanada,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  randomAccountNumberCanada(),
			accBaseCurrency:   CurrencyCanada,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  randomAccountNumberCanada(),
			accBaseCurrency:   CurrencyCanada,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  randomAccountNumberCanada(),
			accBaseCurrency:   CurrencyCanada,
		},
		// Bank ID tests
		{
			name:              "bank id blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  randomAccountNumberCanada(),
			accBaseCurrency:   CurrencyCanada,
		},
		{
			name:              "invalid bank id not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID: randomAlphanumeric(
				BankIDLengthCanada,
				alphanumericStylePure,
			),
			accBankIDCode:    BankIDCodeCanada,
			accAccountNumber: randomAccountNumberCanada(),
			accBaseCurrency:  CurrencyCanada,
		},
		{
			name:              "invalid bank id length 8",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(8),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  randomAccountNumberCanada(),
			accBaseCurrency:   CurrencyCanada,
		},
		{
			name:              "invalid bank id length 10",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(10),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  randomAccountNumberCanada(),
			accBaseCurrency:   CurrencyCanada,
		},
		// Bank ID Code tests
		{
			name:              "bank id code blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberCanada(),
			accBaseCurrency:   CurrencyCanada,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberCanada(),
			accBaseCurrency:   CurrencyCanada,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDCanada(),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodeCanada),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberCanada(),
			accBaseCurrency:  CurrencyCanada,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyCanada,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber: randomAlphanumeric(
				randomLength(
					AccountNumberLengthCanadaStart,
					AccountNumberLengthCanadaStop,
				),
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencyCanada,
		},
		{
			name:              "invalid account number length 6",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  randomNumberString(6),
			accBaseCurrency:   CurrencyCanada,
		},
		{
			name:              "invalid account number length 13",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  randomNumberString(13),
			accBaseCurrency:   CurrencyCanada,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  randomAccountNumberCanada(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  randomAccountNumberCanada(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  randomAccountNumberCanada(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencyCanada),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  randomAccountNumberCanada(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryCanada,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDCanada(),
			accBankIDCode:     BankIDCodeCanada,
			accAccountNumber:  randomAccountNumberCanada(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	franceTestCases := []testOptions{
		// BIC tests
		{
			name:              "bic blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            "",
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  randomAccountNumberFrance(),
			accBaseCurrency:   CurrencyFrance,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  randomAccountNumberFrance(),
			accBaseCurrency:   CurrencyFrance,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  randomAccountNumberFrance(),
			accBaseCurrency:   CurrencyFrance,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  randomAccountNumberFrance(),
			accBaseCurrency:   CurrencyFrance,
		},
		// Bank ID tests
		{
			name:              "invalid bank id blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  randomAccountNumberFrance(),
			accBaseCurrency:   CurrencyFrance,
		},
		{
			name:              "invalid bank id not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID: randomAlphanumeric(
				BankIDLengthFrance,
				alphanumericStylePure,
			),
			accBankIDCode:    BankIDCodeFrance,
			accAccountNumber: randomAccountNumberFrance(),
			accBaseCurrency:  CurrencyFrance,
		},
		{
			name:              "invalid bank id length 9",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(9),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  randomAccountNumberFrance(),
			accBaseCurrency:   CurrencyFrance,
		},
		{
			name:              "invalid bank id length 11",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(11),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  randomAccountNumberFrance(),
			accBaseCurrency:   CurrencyFrance,
		},
		// Bank ID Code tests
		{
			name:              "invalid bank id code blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberFrance(),
			accBaseCurrency:   CurrencyFrance,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberFrance(),
			accBaseCurrency:   CurrencyFrance,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDFrance(),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodeFrance),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberFrance(),
			accBaseCurrency:  CurrencyFrance,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyFrance,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber: randomAlphanumeric(
				AccountNumberLengthFrance,
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencyFrance,
		},
		{
			name:              "invalid account number length 9",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  randomNumberString(9),
			accBaseCurrency:   CurrencyFrance,
		},
		{
			name:              "invalid account number length 11",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  randomNumberString(11),
			accBaseCurrency:   CurrencyFrance,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  randomAccountNumberFrance(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  randomAccountNumberFrance(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  randomAccountNumberFrance(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencyFrance),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  randomAccountNumberFrance(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryFrance,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDFrance(),
			accBankIDCode:     BankIDCodeFrance,
			accAccountNumber:  randomAccountNumberFrance(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	germanyTestCases := []testOptions{
		// BIC tests
		{
			name:              "bic blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            "",
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  randomAccountNumberGermany(),
			accBaseCurrency:   CurrencyGermany,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  randomAccountNumberGermany(),
			accBaseCurrency:   CurrencyGermany,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  randomAccountNumberGermany(),
			accBaseCurrency:   CurrencyGermany,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  randomAccountNumberGermany(),
			accBaseCurrency:   CurrencyGermany,
		},
		// Bank ID tests
		{
			name:              "invalid bank id blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  randomAccountNumberGermany(),
			accBaseCurrency:   CurrencyGermany,
		},
		{
			name:              "invalid bank id not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID: randomAlphanumeric(
				BankIDLengthGermany,
				alphanumericStylePure,
			),
			accBankIDCode:    BankIDCodeGermany,
			accAccountNumber: randomAccountNumberGermany(),
			accBaseCurrency:  CurrencyGermany,
		},
		{
			name:              "invalid bank id length 7",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(7),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  randomAccountNumberGermany(),
			accBaseCurrency:   CurrencyGermany,
		},
		{
			name:              "invalid bank id length 9",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(9),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  randomAccountNumberGermany(),
			accBaseCurrency:   CurrencyGermany,
		},
		// Bank ID Code tests
		{
			name:              "invalid bank id code blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberGermany(),
			accBaseCurrency:   CurrencyGermany,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberGermany(),
			accBaseCurrency:   CurrencyGermany,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGermany(),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodeGermany),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberGermany(),
			accBaseCurrency:  CurrencyGermany,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyGermany,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber: randomAlphanumeric(
				AccountNumberLengthGermany,
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencyGermany,
		},
		{
			name:              "invalid account number length 6",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  randomNumberString(6),
			accBaseCurrency:   CurrencyGermany,
		},
		{
			name:              "invalid account number length 8",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  randomNumberString(8),
			accBaseCurrency:   CurrencyGermany,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  randomAccountNumberGermany(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  randomAccountNumberGermany(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  randomAccountNumberGermany(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencyGermany),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  randomAccountNumberGermany(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGermany,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGermany(),
			accBankIDCode:     BankIDCodeGermany,
			accAccountNumber:  randomAccountNumberGermany(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	greeceTestCases := []testOptions{
		// BIC tests
		{
			name:              "bic blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            "",
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  randomAccountNumberGreece(),
			accBaseCurrency:   CurrencyGreecee,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  randomAccountNumberGreece(),
			accBaseCurrency:   CurrencyGreecee,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  randomAccountNumberGreece(),
			accBaseCurrency:   CurrencyGreecee,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  randomAccountNumberGreece(),
			accBaseCurrency:   CurrencyGreecee,
		},
		// Bank ID tests
		{
			name:              "invalid bank id blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  randomAccountNumberGreece(),
			accBaseCurrency:   CurrencyGreecee,
		},
		{
			name:              "invalid bank id not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID: randomAlphanumeric(
				BankIDLengthGreece,
				alphanumericStylePure,
			),
			accBankIDCode:    BankIDCodeGreece,
			accAccountNumber: randomAccountNumberGreece(),
			accBaseCurrency:  CurrencyGreecee,
		},
		{
			name:              "invalid bank id length 6",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(6),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  randomAccountNumberGreece(),
			accBaseCurrency:   CurrencyGreecee,
		},
		{
			name:              "invalid bank id length 8",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(8),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  randomAccountNumberGreece(),
			accBaseCurrency:   CurrencyGreecee,
		},
		// Bank ID Code tests
		{
			name:              "invalid bank id code blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberGreece(),
			accBaseCurrency:   CurrencyGreecee,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberGreece(),
			accBaseCurrency:   CurrencyGreecee,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGreece(),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodeGreece),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberGreece(),
			accBaseCurrency:  CurrencyGreecee,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyGreecee,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber: randomAlphanumeric(
				AccountNumberLengthGreece,
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencyGreecee,
		},
		{
			name:              "invalid account number length 15",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  randomNumberString(15),
			accBaseCurrency:   CurrencyGreecee,
		},
		{
			name:              "invalid account number length 17",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  randomNumberString(17),
			accBaseCurrency:   CurrencyGreecee,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  randomAccountNumberGreece(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  randomAccountNumberGreece(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  randomAccountNumberGreece(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencyGreecee),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  randomAccountNumberGreece(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryGreece,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDGreece(),
			accBankIDCode:     BankIDCodeGreece,
			accAccountNumber:  randomAccountNumberGreece(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	hongKongTestCases := []testOptions{
		// BIC tests
		{
			name:              "invalid bic blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            "",
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  randomAccountNumberHongKong(),
			accBaseCurrency:   CurrencyHongKong,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  randomAccountNumberHongKong(),
			accBaseCurrency:   CurrencyHongKong,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  randomAccountNumberHongKong(),
			accBaseCurrency:   CurrencyHongKong,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  randomAccountNumberHongKong(),
			accBaseCurrency:   CurrencyHongKong,
		},
		// Bank ID tests
		{
			name:              "bank id blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  randomAccountNumberHongKong(),
			accBaseCurrency:   CurrencyHongKong,
		},
		{
			name:              "invalid bank id not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID: randomAlphanumeric(
				BankIDLengthHongKong,
				alphanumericStylePure,
			),
			accBankIDCode:    BankIDCodeHongKong,
			accAccountNumber: randomAccountNumberHongKong(),
			accBaseCurrency:  CurrencyHongKong,
		},
		{
			name:              "invalid bank id length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(2),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  randomAccountNumberHongKong(),
			accBaseCurrency:   CurrencyHongKong,
		},
		{
			name:              "invalid bank id length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(4),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  randomAccountNumberHongKong(),
			accBaseCurrency:   CurrencyHongKong,
		},
		// Bank ID Code tests
		{
			name:              "bank id code blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberHongKong(),
			accBaseCurrency:   CurrencyHongKong,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberHongKong(),
			accBaseCurrency:   CurrencyHongKong,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDHongKong(),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodeHongKong),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberHongKong(),
			accBaseCurrency:  CurrencyHongKong,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyHongKong,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber: randomAlphanumeric(
				randomLength(
					AccountNumberLengthHongKongStart,
					AccountNumberLengthHongKongStop,
				),
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencyHongKong,
		},
		{
			name:              "invalid account number length 8",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  randomNumberString(8),
			accBaseCurrency:   CurrencyHongKong,
		},
		{
			name:              "invalid account number length 13",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  randomNumberString(13),
			accBaseCurrency:   CurrencyHongKong,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  randomAccountNumberHongKong(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  randomAccountNumberHongKong(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  randomAccountNumberHongKong(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencyHongKong),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  randomAccountNumberHongKong(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryHongKong,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDHongKong(),
			accBankIDCode:     BankIDCodeHongKong,
			accAccountNumber:  randomAccountNumberHongKong(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	italyTestCases := []testOptions{
		// BIC tests
		{
			name:              "bic blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            "",
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency:   CurrencyItaly,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency:   CurrencyItaly,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency:   CurrencyItaly,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency:   CurrencyItaly,
		},
		// Bank ID tests
		{
			name:              "invalid bank id blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency:   CurrencyItaly,
		},
		{
			name:              "invalid bank id not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID: randomAlphanumeric(
				BankIDLengthItalyAccountNumberPresent,
				alphanumericStylePure,
			),
			accBankIDCode:    BankIDCodeItaly,
			accAccountNumber: randomAccountNumberItaly(),
			accBaseCurrency:  CurrencyItaly,
		},
		{
			name:              "invalid bank id length 10 account number present",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDItaly(),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency:   CurrencyItaly,
		},
		{
			name:              "invalid bank id length 11 account number not present",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyItaly,
		},
		{
			name:              "invalid bank id length 10",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(10),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency:   CurrencyItaly,
		},
		{
			name:              "invalid bank id length 12",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(12),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency:   CurrencyItaly,
		},
		// Bank ID Code tests
		{
			name:              "invalid bank id code blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency:   CurrencyItaly,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency:   CurrencyItaly,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodeItaly),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberItaly(),
			accBaseCurrency:  CurrencyItaly,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDItaly(),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyItaly,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber: randomAlphanumeric(
				AccountNumberLengthItaly,
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencyItaly,
		},
		{
			name:              "invalid account number length 11",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomNumberString(11),
			accBaseCurrency:   CurrencyItaly,
		},
		{
			name:              "invalid account number length 13",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomNumberString(13),
			accBaseCurrency:   CurrencyItaly,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencyItaly),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryItaly,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDItaly(accountNumberPresent),
			accBankIDCode:     BankIDCodeItaly,
			accAccountNumber:  randomAccountNumberItaly(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	luxembourgTestCases := []testOptions{
		// BIC tests
		{
			name:              "bic blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            "",
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  randomAccountNumberLuxembourg(),
			accBaseCurrency:   CurrencyLuxembourg,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  randomAccountNumberLuxembourg(),
			accBaseCurrency:   CurrencyLuxembourg,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  randomAccountNumberLuxembourg(),
			accBaseCurrency:   CurrencyLuxembourg,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  randomAccountNumberLuxembourg(),
			accBaseCurrency:   CurrencyLuxembourg,
		},
		// Bank ID tests
		{
			name:              "invalid bank id blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  randomAccountNumberLuxembourg(),
			accBaseCurrency:   CurrencyLuxembourg,
		},
		{
			name:              "invalid bank id not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID: randomAlphanumeric(
				BankIDLengthLuxembourg,
				alphanumericStylePure,
			),
			accBankIDCode:    BankIDCodeLuxembourg,
			accAccountNumber: randomAccountNumberLuxembourg(),
			accBaseCurrency:  CurrencyLuxembourg,
		},
		{
			name:              "invalid bank id length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(2),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  randomAccountNumberLuxembourg(),
			accBaseCurrency:   CurrencyLuxembourg,
		},
		{
			name:              "invalid bank id length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(4),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  randomAccountNumberLuxembourg(),
			accBaseCurrency:   CurrencyLuxembourg,
		},
		// Bank ID Code tests
		{
			name:              "invalid bank id code blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberLuxembourg(),
			accBaseCurrency:   CurrencyLuxembourg,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberLuxembourg(),
			accBaseCurrency:   CurrencyLuxembourg,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodeLuxembourg),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberLuxembourg(),
			accBaseCurrency:  CurrencyLuxembourg,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyLuxembourg,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber: randomAlphanumeric(
				AccountNumberLengthLuxembourg,
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencyLuxembourg,
		},
		{
			name:              "invalid account number length 12",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  randomNumberString(12),
			accBaseCurrency:   CurrencyLuxembourg,
		},
		{
			name:              "invalid account number length 14",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  randomNumberString(14),
			accBaseCurrency:   CurrencyLuxembourg,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  randomAccountNumberLuxembourg(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  randomAccountNumberLuxembourg(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  randomAccountNumberLuxembourg(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencyLuxembourg),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  randomAccountNumberLuxembourg(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryLuxembourg,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDLuxembourg(),
			accBankIDCode:     BankIDCodeLuxembourg,
			accAccountNumber:  randomAccountNumberLuxembourg(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	netherlandsTestCases := []testOptions{
		// BIC tests
		{
			name:              "invalid bic blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            "",
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  randomAccountNumberNetherlands(),
			accBaseCurrency:   CurrencyNetherlands,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  randomAccountNumberNetherlands(),
			accBaseCurrency:   CurrencyNetherlands,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  randomAccountNumberNetherlands(),
			accBaseCurrency:   CurrencyNetherlands,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  randomAccountNumberNetherlands(),
			accBaseCurrency:   CurrencyNetherlands,
		},
		// Bank ID tests
		{
			name:              "bank id blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  randomAccountNumberNetherlands(),
			accBaseCurrency:   CurrencyNetherlands,
		},
		{
			name:              "invalid bank id not blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC(),
			accBankID:         randomAlphanumeric(6, alphanumericStylePure),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  randomAccountNumberNetherlands(),
			accBaseCurrency:   CurrencyNetherlands,
		},
		// Bank ID Code tests
		{
			name:              "bank id code blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberNetherlands(),
			accBaseCurrency:   CurrencyNetherlands,
		},
		{
			name:              "invalid bank id code not blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  randomAccountNumberNetherlands(),
			accBaseCurrency:   CurrencyNetherlands,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyNetherlands,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber: randomAlphanumeric(
				AccountNumberLengthNetherlands,
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencyNetherlands,
		},
		{
			name:              "invalid account number length 9",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  randomNumberString(9),
			accBaseCurrency:   CurrencyNetherlands,
		},
		{
			name:              "invalid account number length 11",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  randomNumberString(11),
			accBaseCurrency:   CurrencyNetherlands,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  randomAccountNumberNetherlands(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  randomAccountNumberNetherlands(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  randomAccountNumberNetherlands(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencyNetherlands),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  randomAccountNumberNetherlands(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryNetherlands,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDNetherlands(),
			accBankIDCode:     BankIDCodeNetherlands,
			accAccountNumber:  randomAccountNumberNetherlands(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	polandTestCases := []testOptions{
		// BIC tests
		{
			name:              "bic blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            "",
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency:   CurrencyPoland,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency:   CurrencyPoland,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency:   CurrencyPoland,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency:   CurrencyPoland,
		},
		// Bank ID tests
		{
			name:              "invalid bank id blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency:   CurrencyPoland,
		},
		{
			name:              "invalid bank id not blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomAlphanumeric(8, alphanumericStylePure),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency:   CurrencyPoland,
		},
		{
			name:              "invalid bank id length 7",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(7),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency:   CurrencyPoland,
		},
		{
			name:              "invalid bank id length 9",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(9),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency:   CurrencyPoland,
		},
		// Bank ID Code tests
		{
			name:              "invalid bank id code blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency:   CurrencyPoland,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency:   CurrencyPoland,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPoland(),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodePoland),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberPoland(),
			accBaseCurrency:  CurrencyPoland,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyPoland,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber: randomAlphanumeric(
				AccountNumberLengthPoland,
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencyPoland,
		},
		{
			name:              "invalid account number length 15",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomNumberString(15),
			accBaseCurrency:   CurrencyPoland,
		},
		{
			name:              "invalid account number length 17",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomNumberString(17),
			accBaseCurrency:   CurrencyPoland,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencyPoland),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPoland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPoland(),
			accBankIDCode:     BankIDCodePoland,
			accAccountNumber:  randomAccountNumberPoland(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
	}

	portugalTestCases := []testOptions{
		// BIC tests
		{
			name:              "bic blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            "",
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  randomAccountNumberPortugal(),
			accBaseCurrency:   CurrencyPortugal,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  randomAccountNumberPortugal(),
			accBaseCurrency:   CurrencyPortugal,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  randomAccountNumberPortugal(),
			accBaseCurrency:   CurrencyPortugal,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  randomAccountNumberPortugal(),
			accBaseCurrency:   CurrencyPortugal,
		},
		// Bank ID tests
		{
			name:              "invalid bank id blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  randomAccountNumberPortugal(),
			accBaseCurrency:   CurrencyPortugal,
		},
		{
			name:              "invalid bank id not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID: randomAlphanumeric(
				BankIDLengthPortugal,
				alphanumericStylePure,
			),
			accBankIDCode:    BankIDCodePortugal,
			accAccountNumber: randomAccountNumberPortugal(),
			accBaseCurrency:  CurrencyPortugal,
		},
		{
			name:              "invalid bank id length 7",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(7),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  randomAccountNumberPortugal(),
			accBaseCurrency:   CurrencyPortugal,
		},
		{
			name:              "invalid bank id length 9",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(9),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  randomAccountNumberPortugal(),
			accBaseCurrency:   CurrencyPortugal,
		},
		// Bank ID Code tests
		{
			name:              "invalid bank id code blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberPortugal(),
			accBaseCurrency:   CurrencyPortugal,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberPortugal(),
			accBaseCurrency:   CurrencyPortugal,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPortugal(),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodePortugal),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberPortugal(),
			accBaseCurrency:  CurrencyPortugal,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyPortugal,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber: randomAlphanumeric(
				AccountNumberLengthPortugal,
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencyPortugal,
		},
		{
			name:              "invalid account number length 10",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  randomNumberString(10),
			accBaseCurrency:   CurrencyPortugal,
		},
		{
			name:              "invalid account number length 12",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  randomNumberString(12),
			accBaseCurrency:   CurrencyPortugal,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  randomAccountNumberPortugal(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  randomAccountNumberPortugal(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  randomAccountNumberPortugal(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencyPortugal),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  randomAccountNumberPortugal(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryPortugal,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDPortugal(),
			accBankIDCode:     BankIDCodePortugal,
			accAccountNumber:  randomAccountNumberPortugal(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	spainTestCases := []testOptions{
		// BIC tests
		{
			name:              "bic blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            "",
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  randomAccountNumberSpain(),
			accBaseCurrency:   CurrencySpain,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  randomAccountNumberSpain(),
			accBaseCurrency:   CurrencySpain,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  randomAccountNumberSpain(),
			accBaseCurrency:   CurrencySpain,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  randomAccountNumberSpain(),
			accBaseCurrency:   CurrencySpain,
		},
		// Bank ID tests
		{
			name:              "invalid bank id blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  randomAccountNumberSpain(),
			accBaseCurrency:   CurrencySpain,
		},
		{
			name:              "invalid bank id not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID: randomAlphanumeric(
				BankIDLengthSpain,
				alphanumericStylePure,
			),
			accBankIDCode:    BankIDCodeSpain,
			accAccountNumber: randomAccountNumberSpain(),
			accBaseCurrency:  CurrencySpain,
		},
		{
			name:              "invalid bank id length 7",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(7),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  randomAccountNumberSpain(),
			accBaseCurrency:   CurrencySpain,
		},
		{
			name:              "invalid bank id length 9",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(9),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  randomAccountNumberSpain(),
			accBaseCurrency:   CurrencySpain,
		},
		// Bank ID Code tests
		{
			name:              "invalid bank id code blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberSpain(),
			accBaseCurrency:   CurrencySpain,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberSpain(),
			accBaseCurrency:   CurrencySpain,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSpain(),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodeSpain),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberSpain(),
			accBaseCurrency:  CurrencySpain,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencySpain,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber: randomAlphanumeric(
				AccountNumberLengthSpain,
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencySpain,
		},
		{
			name:              "invalid account number length 9",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  randomNumberString(9),
			accBaseCurrency:   CurrencySpain,
		},
		{
			name:              "invalid account number length 11",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  randomNumberString(11),
			accBaseCurrency:   CurrencySpain,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  randomAccountNumberSpain(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  randomAccountNumberSpain(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  randomAccountNumberSpain(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencySpain),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  randomAccountNumberSpain(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySpain,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSpain(),
			accBankIDCode:     BankIDCodeSpain,
			accAccountNumber:  randomAccountNumberSpain(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	switzerlandTestCases := []testOptions{
		// BIC tests
		{
			name:              "bic blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            "",
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  randomAccountNumberSwitzerland(),
			accBaseCurrency:   CurrencySwitzerland,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  randomAccountNumberSwitzerland(),
			accBaseCurrency:   CurrencySwitzerland,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  randomAccountNumberSwitzerland(),
			accBaseCurrency:   CurrencySwitzerland,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  randomAccountNumberSwitzerland(),
			accBaseCurrency:   CurrencySwitzerland,
		},
		// Bank ID tests
		{
			name:              "invalid bank id blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  randomAccountNumberSwitzerland(),
			accBaseCurrency:   CurrencySwitzerland,
		},
		{
			name:              "invalid bank id not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID: randomAlphanumeric(
				BankIDLengthSwitzerland,
				alphanumericStylePure,
			),
			accBankIDCode:    BankIDCodeSwitzerland,
			accAccountNumber: randomAccountNumberSwitzerland(),
			accBaseCurrency:  CurrencySwitzerland,
		},
		{
			name:              "invalid bank id length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(4),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  randomAccountNumberSwitzerland(),
			accBaseCurrency:   CurrencySwitzerland,
		},
		{
			name:              "invalid bank id length 6",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(6),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  randomAccountNumberSwitzerland(),
			accBaseCurrency:   CurrencySwitzerland,
		},
		// Bank ID Code tests
		{
			name:              "invalid bank id code blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberSwitzerland(),
			accBaseCurrency:   CurrencySwitzerland,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberSwitzerland(),
			accBaseCurrency:   CurrencySwitzerland,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodeSwitzerland),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberSwitzerland(),
			accBaseCurrency:  CurrencySwitzerland,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencySwitzerland,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber: randomAlphanumeric(
				AccountNumberLengthSwitzerland,
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencySwitzerland,
		},
		{
			name:              "invalid account number length 11",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  randomNumberString(11),
			accBaseCurrency:   CurrencySwitzerland,
		},
		{
			name:              "invalid account number length 13",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  randomNumberString(13),
			accBaseCurrency:   CurrencySwitzerland,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  randomAccountNumberSwitzerland(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  randomAccountNumberSwitzerland(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  randomAccountNumberSwitzerland(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencySwitzerland),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  randomAccountNumberSwitzerland(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountrySwitzerland,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDSwitzerland(),
			accBankIDCode:     BankIDCodeSwitzerland,
			accAccountNumber:  randomAccountNumberSwitzerland(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	unitedStatesTestCases := []testOptions{
		// BIC tests
		{
			name:              "invalid bic blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            "",
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  randomAccountNumberUnitedStates(),
			accBaseCurrency:   CurrencyUnitedStates,
		},
		{
			name:              "invalid bic",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBICInvalid(),
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  randomAccountNumberUnitedStates(),
			accBaseCurrency:   CurrencyUnitedStates,
		},
		{
			name:              "invalid bic length minus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC()[1:],
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  randomAccountNumberUnitedStates(),
			accBaseCurrency:   CurrencyUnitedStates,
		},
		{
			name:              "invalid bic length plus 1",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC() + "1",
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  randomAccountNumberUnitedStates(),
			accBaseCurrency:   CurrencyUnitedStates,
		},
		// Bank ID tests
		{
			name:              "invalid bank id blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         "",
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  randomAccountNumberUnitedStates(),
			accBaseCurrency:   CurrencyUnitedStates,
		},
		{
			name:              "invalid bank id not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID: randomAlphanumeric(
				BankIDLengthUnitedStates,
				alphanumericStylePure,
			),
			accBankIDCode:    BankIDCodeUnitedStates,
			accAccountNumber: randomAccountNumberUnitedStates(),
			accBaseCurrency:  CurrencyUnitedStates,
		},
		{
			name:              "invalid bank id length 8",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(8),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  randomAccountNumberUnitedStates(),
			accBaseCurrency:   CurrencyUnitedStates,
		},
		{
			name:              "invalid bank id length 10",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         randomNumberString(10),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  randomAccountNumberUnitedStates(),
			accBaseCurrency:   CurrencyUnitedStates,
		},
		// Bank ID Code tests
		{
			name:              "invalid bank id code blank",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     "",
			accAccountNumber:  randomAccountNumberUnitedStates(),
			accBaseCurrency:   CurrencyUnitedStates,
		},
		{
			name:              "invalid bank id code",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     randomBankIDCodeInvalid(),
			accAccountNumber:  randomAccountNumberUnitedStates(),
			accBaseCurrency:   CurrencyUnitedStates,
		},
		{
			name:              "invalid bank id code non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode: randomAlphanumeric(
				len(BankIDCodeUnitedStates),
				alphanumericStylePure,
			),
			accAccountNumber: randomAccountNumberUnitedStates(),
			accBaseCurrency:  CurrencyUnitedStates,
		},
		// Account Number tests
		{
			name:              "account number blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  "",
			accBaseCurrency:   CurrencyUnitedStates,
		},
		{
			name:              "invalid account number not number",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber: randomAlphanumeric(
				randomLength(
					AccountNumberLengthUnitedStatesStart,
					AccountNumberLengthUnitedStatesStop,
				),
				alphanumericStylePure,
			),
			accBaseCurrency: CurrencyUnitedStates,
		},
		{
			name:              "invalid account number length 5",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  randomNumberString(5),
			accBaseCurrency:   CurrencyUnitedStates,
		},
		{
			name:              "invalid account number length 18",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  randomNumberString(18),
			accBaseCurrency:   CurrencyUnitedStates,
		},
		// Base Currency
		{
			name:              "base currency blank",
			shouldError:       false,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  randomAccountNumberUnitedStates(),
			accBaseCurrency:   "",
		},
		{
			name:              "invalid base currency",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  randomAccountNumberUnitedStates(),
			accBaseCurrency:   randomBaseCurrencyInvalid(),
		},
		{
			name:              "invalid base currency non english letters",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  randomAccountNumberUnitedStates(),
			accBaseCurrency: randomAlphanumeric(
				len(CurrencyUnitedStates),
				alphanumericStylePure,
				uppercase,
			),
		},
		{
			name:              "invalid base currency length 2",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  randomAccountNumberUnitedStates(),
			accBaseCurrency:   randomAlpha(2, uppercase),
		},
		{
			name:              "invalid base currency length 4",
			shouldError:       true,
			accType:           accountType,
			accID:             uuid.New().String(),
			accOrganisationID: uuid.New().String(),
			accCountry:        CountryUnitedStates,
			accBIC:            randomBIC(),
			accBankID:         randomBankIDUnitedStates(),
			accBankIDCode:     BankIDCodeUnitedStates,
			accAccountNumber:  randomAccountNumberUnitedStates(),
			accBaseCurrency:   randomAlpha(4, uppercase),
		},
	}

	testCases := []struct {
		country string
		cases   []testOptions
	}{
		{country: "all countries", cases: allCountriesTestCases},
		{country: "united kingdom", cases: unitedKingdomTestCases},
		{country: "australia", cases: australiaTestCases},
		{country: "belgium", cases: belgiumTestCases},
		{country: "canada", cases: canadaTestCases},
		{country: "france", cases: franceTestCases},
		{country: "germany", cases: germanyTestCases},
		{country: "greece", cases: greeceTestCases},
		{country: "hong kong", cases: hongKongTestCases},
		{country: "italy", cases: italyTestCases},
		{country: "luxembourg", cases: luxembourgTestCases},
		{country: "netherlands", cases: netherlandsTestCases},
		{country: "poland", cases: polandTestCases},
		{country: "portugal", cases: portugalTestCases},
		{country: "spain", cases: spainTestCases},
		{country: "switzerland", cases: switzerlandTestCases},
		{country: "united states", cases: unitedStatesTestCases},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.country, func(t *testing.T) {
			t.Parallel()
			for _, cc := range tc.cases {
				cc := cc
				t.Run(cc.name, func(t *testing.T) {
					t.Parallel()
					options := &Options{
						Type:           cc.accType,
						ID:             cc.accID,
						OrganisationID: cc.accOrganisationID,
						Attributes: []Attribute{
							WithAttrCountry(cc.accCountry),
							WithAttrBIC(cc.accBIC),
							WithAttrBankID(cc.accBankID),
							WithAttrBankIDCode(cc.accBankIDCode),
							WithAttrAccountNumber(cc.accAccountNumber),
							WithAttrBaseCurrency(cc.accBaseCurrency),
							WithAttrJointAccount(cc.accJointAccount),
							WithAttrFirstName(cc.accFirstName),
							WithAttrAlternativeBankAccountNames(cc.accAlternativeBankAccountNames...),
							WithAttrAccountMatchingOptOut(cc.accAccountMatchingOptOut),
							WithAttrCustomerID(cc.accCustomerID),
						},
					}

					account, err := NewAccount(options)
					require.IsType(t, &Account{}, account)
					if cc.shouldError {
						require.Error(t, err)
					} else {
						require.NoError(t, err)
						assert.Equal(t, cc.accType, account.Data.Type)
						assert.Equal(t, cc.accID, account.Data.ID)
						assert.Equal(t, cc.accOrganisationID, account.Data.OrganisationID)
						assert.Equal(t, cc.accCountry, account.Data.Attributes.Country)
						assert.Equal(t, cc.accBIC, account.Data.Attributes.BIC)
						assert.Equal(t, cc.accBankID, account.Data.Attributes.BankID)
						assert.Equal(t, cc.accBankIDCode, account.Data.Attributes.BankIDCode)
						assert.Equal(t, cc.accAccountNumber, account.Data.Attributes.AccountNumber)
						assert.Equal(t, cc.accBaseCurrency, account.Data.Attributes.BaseCurrency)
						assert.Equal(t, cc.accJointAccount, account.Data.Attributes.JointAccount)
						assert.Equal(t, cc.accFirstName, account.Data.Attributes.FirstName)
						assert.Equal(t, cc.accAlternativeBankAccountNames, account.Data.Attributes.AlternativeBankAccountNames)
						assert.Equal(t, cc.accAccountMatchingOptOut, account.Data.Attributes.AccountMatchingOptOut)
						assert.Equal(t, cc.accCustomerID, account.Data.Attributes.CustomerID)
					}
				})
			}
		})
	}
}
